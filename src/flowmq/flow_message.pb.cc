// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow_message.proto

#include "flow_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_flow_5fmessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flow_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_AppendEntriesResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flow_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_ClientCommitMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flow_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_ClientOpenQueue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flow_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_ClientOpenQueueResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flow_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_ClientPutMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flow_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_ClientPutMessageResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flow_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_ConsumerDisconnected;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flow_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_RequestVoteRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flow_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_RequestVoteResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flow_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_ServerSendMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flow_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LogEntry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_flow_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FlowMessage_AppendEntriesRequest;
}  // namespace protobuf_flow_5fmessage_2eproto
namespace flowmq {
class LogEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogEntry>
      _instance;
} _LogEntry_default_instance_;
class FlowMessage_RequestVoteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowMessage_RequestVoteRequest>
      _instance;
} _FlowMessage_RequestVoteRequest_default_instance_;
class FlowMessage_RequestVoteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowMessage_RequestVoteResponse>
      _instance;
} _FlowMessage_RequestVoteResponse_default_instance_;
class FlowMessage_AppendEntriesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowMessage_AppendEntriesRequest>
      _instance;
} _FlowMessage_AppendEntriesRequest_default_instance_;
class FlowMessage_AppendEntriesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowMessage_AppendEntriesResponse>
      _instance;
} _FlowMessage_AppendEntriesResponse_default_instance_;
class FlowMessage_ClientPutMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowMessage_ClientPutMessage>
      _instance;
} _FlowMessage_ClientPutMessage_default_instance_;
class FlowMessage_ClientPutMessageResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowMessage_ClientPutMessageResponse>
      _instance;
} _FlowMessage_ClientPutMessageResponse_default_instance_;
class FlowMessage_ClientCommitMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowMessage_ClientCommitMessage>
      _instance;
} _FlowMessage_ClientCommitMessage_default_instance_;
class FlowMessage_ServerSendMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowMessage_ServerSendMessage>
      _instance;
} _FlowMessage_ServerSendMessage_default_instance_;
class FlowMessage_ClientOpenQueueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowMessage_ClientOpenQueue>
      _instance;
} _FlowMessage_ClientOpenQueue_default_instance_;
class FlowMessage_ClientOpenQueueResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowMessage_ClientOpenQueueResponse>
      _instance;
} _FlowMessage_ClientOpenQueueResponse_default_instance_;
class FlowMessage_ConsumerDisconnectedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowMessage_ConsumerDisconnected>
      _instance;
} _FlowMessage_ConsumerDisconnected_default_instance_;
class FlowMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowMessage>
      _instance;
} _FlowMessage_default_instance_;
}  // namespace flowmq
namespace protobuf_flow_5fmessage_2eproto {
static void InitDefaultsLogEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmq::_LogEntry_default_instance_;
    new (ptr) ::flowmq::LogEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmq::LogEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogEntry}, {}};

static void InitDefaultsFlowMessage_RequestVoteRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmq::_FlowMessage_RequestVoteRequest_default_instance_;
    new (ptr) ::flowmq::FlowMessage_RequestVoteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmq::FlowMessage_RequestVoteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_RequestVoteRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowMessage_RequestVoteRequest}, {}};

static void InitDefaultsFlowMessage_RequestVoteResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmq::_FlowMessage_RequestVoteResponse_default_instance_;
    new (ptr) ::flowmq::FlowMessage_RequestVoteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmq::FlowMessage_RequestVoteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_RequestVoteResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowMessage_RequestVoteResponse}, {}};

static void InitDefaultsFlowMessage_AppendEntriesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmq::_FlowMessage_AppendEntriesRequest_default_instance_;
    new (ptr) ::flowmq::FlowMessage_AppendEntriesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmq::FlowMessage_AppendEntriesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FlowMessage_AppendEntriesRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFlowMessage_AppendEntriesRequest}, {
      &protobuf_flow_5fmessage_2eproto::scc_info_LogEntry.base,}};

static void InitDefaultsFlowMessage_AppendEntriesResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmq::_FlowMessage_AppendEntriesResponse_default_instance_;
    new (ptr) ::flowmq::FlowMessage_AppendEntriesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmq::FlowMessage_AppendEntriesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_AppendEntriesResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowMessage_AppendEntriesResponse}, {}};

static void InitDefaultsFlowMessage_ClientPutMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmq::_FlowMessage_ClientPutMessage_default_instance_;
    new (ptr) ::flowmq::FlowMessage_ClientPutMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmq::FlowMessage_ClientPutMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_ClientPutMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowMessage_ClientPutMessage}, {}};

static void InitDefaultsFlowMessage_ClientPutMessageResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmq::_FlowMessage_ClientPutMessageResponse_default_instance_;
    new (ptr) ::flowmq::FlowMessage_ClientPutMessageResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmq::FlowMessage_ClientPutMessageResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_ClientPutMessageResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowMessage_ClientPutMessageResponse}, {}};

static void InitDefaultsFlowMessage_ClientCommitMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmq::_FlowMessage_ClientCommitMessage_default_instance_;
    new (ptr) ::flowmq::FlowMessage_ClientCommitMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmq::FlowMessage_ClientCommitMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_ClientCommitMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowMessage_ClientCommitMessage}, {}};

static void InitDefaultsFlowMessage_ServerSendMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmq::_FlowMessage_ServerSendMessage_default_instance_;
    new (ptr) ::flowmq::FlowMessage_ServerSendMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmq::FlowMessage_ServerSendMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_ServerSendMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowMessage_ServerSendMessage}, {}};

static void InitDefaultsFlowMessage_ClientOpenQueue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmq::_FlowMessage_ClientOpenQueue_default_instance_;
    new (ptr) ::flowmq::FlowMessage_ClientOpenQueue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmq::FlowMessage_ClientOpenQueue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_ClientOpenQueue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowMessage_ClientOpenQueue}, {}};

static void InitDefaultsFlowMessage_ClientOpenQueueResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmq::_FlowMessage_ClientOpenQueueResponse_default_instance_;
    new (ptr) ::flowmq::FlowMessage_ClientOpenQueueResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmq::FlowMessage_ClientOpenQueueResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_ClientOpenQueueResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowMessage_ClientOpenQueueResponse}, {}};

static void InitDefaultsFlowMessage_ConsumerDisconnected() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmq::_FlowMessage_ConsumerDisconnected_default_instance_;
    new (ptr) ::flowmq::FlowMessage_ConsumerDisconnected();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmq::FlowMessage_ConsumerDisconnected::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_ConsumerDisconnected =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowMessage_ConsumerDisconnected}, {}};

static void InitDefaultsFlowMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmq::_FlowMessage_default_instance_;
    new (ptr) ::flowmq::FlowMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmq::FlowMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<11> scc_info_FlowMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsFlowMessage}, {
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_RequestVoteRequest.base,
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_RequestVoteResponse.base,
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_AppendEntriesRequest.base,
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_AppendEntriesResponse.base,
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientPutMessage.base,
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientCommitMessage.base,
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ServerSendMessage.base,
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientOpenQueue.base,
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ConsumerDisconnected.base,
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientOpenQueueResponse.base,
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientPutMessageResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LogEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowMessage_RequestVoteRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowMessage_RequestVoteResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowMessage_AppendEntriesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowMessage_AppendEntriesResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowMessage_ClientPutMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowMessage_ClientPutMessageResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowMessage_ClientCommitMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowMessage_ServerSendMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowMessage_ClientOpenQueue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowMessage_ClientOpenQueueResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowMessage_ConsumerDisconnected.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlowMessage.base);
}

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::LogEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::LogEntry, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::LogEntry, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::LogEntry, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::LogEntry, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::LogEntry, message_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_RequestVoteRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_RequestVoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_RequestVoteRequest, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_RequestVoteRequest, candidate_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_RequestVoteRequest, last_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_RequestVoteRequest, last_log_term_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_RequestVoteResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_RequestVoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_RequestVoteResponse, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_RequestVoteResponse, vote_result_term_granted_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_AppendEntriesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_AppendEntriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_AppendEntriesRequest, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_AppendEntriesRequest, leader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_AppendEntriesRequest, prev_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_AppendEntriesRequest, prev_log_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_AppendEntriesRequest, entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_AppendEntriesRequest, leader_commit_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_AppendEntriesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_AppendEntriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_AppendEntriesResponse, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_AppendEntriesResponse, follower_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_AppendEntriesResponse, append_result_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_AppendEntriesResponse, last_index_synced_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientPutMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientPutMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientPutMessage, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientPutMessage, message_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientPutMessageResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientPutMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientPutMessageResponse, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientPutMessageResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientPutMessageResponse, error_message_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientCommitMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientCommitMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientCommitMessage, message_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ServerSendMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ServerSendMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ServerSendMessage, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ServerSendMessage, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientOpenQueue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientOpenQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientOpenQueue, open_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientOpenQueue, queue_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientOpenQueueResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientOpenQueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientOpenQueueResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientOpenQueueResponse, error_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientOpenQueueResponse, leader_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ClientOpenQueueResponse, leader_port_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ConsumerDisconnected, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ConsumerDisconnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage_ConsumerDisconnected, client_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, partition_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, request_vote_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, request_vote_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, append_entries_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, append_entries_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, client_put_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, client_commit_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, server_send_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, client_open_queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, consumer_disconnected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, client_open_queue_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flowmq::FlowMessage, client_put_message_response_),
  12,
  11,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::flowmq::LogEntry)},
  { 15, 24, sizeof(::flowmq::FlowMessage_RequestVoteRequest)},
  { 28, 35, sizeof(::flowmq::FlowMessage_RequestVoteResponse)},
  { 37, 48, sizeof(::flowmq::FlowMessage_AppendEntriesRequest)},
  { 54, 63, sizeof(::flowmq::FlowMessage_AppendEntriesResponse)},
  { 67, 74, sizeof(::flowmq::FlowMessage_ClientPutMessage)},
  { 76, 84, sizeof(::flowmq::FlowMessage_ClientPutMessageResponse)},
  { 87, 93, sizeof(::flowmq::FlowMessage_ClientCommitMessage)},
  { 94, 101, sizeof(::flowmq::FlowMessage_ServerSendMessage)},
  { 103, 110, sizeof(::flowmq::FlowMessage_ClientOpenQueue)},
  { 112, 121, sizeof(::flowmq::FlowMessage_ClientOpenQueueResponse)},
  { 125, 131, sizeof(::flowmq::FlowMessage_ConsumerDisconnected)},
  { 132, 150, sizeof(::flowmq::FlowMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flowmq::_LogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flowmq::_FlowMessage_RequestVoteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flowmq::_FlowMessage_RequestVoteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flowmq::_FlowMessage_AppendEntriesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flowmq::_FlowMessage_AppendEntriesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flowmq::_FlowMessage_ClientPutMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flowmq::_FlowMessage_ClientPutMessageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flowmq::_FlowMessage_ClientCommitMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flowmq::_FlowMessage_ServerSendMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flowmq::_FlowMessage_ClientOpenQueue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flowmq::_FlowMessage_ClientOpenQueueResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flowmq::_FlowMessage_ConsumerDisconnected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flowmq::_FlowMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "flow_message.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022flow_message.proto\022\006flowmq\"\201\001\n\010LogEntr"
      "y\022\r\n\005index\030\001 \002(\005\022\014\n\004term\030\002 \002(\005\022\022\n\nmessag"
      "e_id\030\003 \002(\003\022\021\n\toperation\030\004 \002(\005\022\017\n\007message"
      "\030\005 \002(\t\" \n\tOPERATION\022\007\n\003ADD\020\000\022\n\n\006COMMIT\020\001"
      "\"\243\021\n\013FlowMessage\022-\n\004type\030\001 \002(\0162\037.flowmq."
      "FlowMessage.MessageType\022\024\n\014partition_id\030"
      "\002 \001(\003\022D\n\024request_vote_request\030\003 \001(\0132&.fl"
      "owmq.FlowMessage.RequestVoteRequest\022F\n\025r"
      "equest_vote_response\030\004 \001(\0132\'.flowmq.Flow"
      "Message.RequestVoteResponse\022H\n\026append_en"
      "tries_request\030\005 \001(\0132(.flowmq.FlowMessage"
      ".AppendEntriesRequest\022J\n\027append_entries_"
      "response\030\006 \001(\0132).flowmq.FlowMessage.Appe"
      "ndEntriesResponse\022@\n\022client_put_message\030"
      "\007 \001(\0132$.flowmq.FlowMessage.ClientPutMess"
      "age\022F\n\025client_commit_message\030\010 \001(\0132\'.flo"
      "wmq.FlowMessage.ClientCommitMessage\022B\n\023s"
      "erver_send_message\030\t \001(\0132%.flowmq.FlowMe"
      "ssage.ServerSendMessage\022>\n\021client_open_q"
      "ueue\030\n \001(\0132#.flowmq.FlowMessage.ClientOp"
      "enQueue\022G\n\025consumer_disconnected\030\013 \001(\0132("
      ".flowmq.FlowMessage.ConsumerDisconnected"
      "\022O\n\032client_open_queue_response\030\014 \001(\0132+.f"
      "lowmq.FlowMessage.ClientOpenQueueRespons"
      "e\022Q\n\033client_put_message_response\030\r \001(\0132,"
      ".flowmq.FlowMessage.ClientPutMessageResp"
      "onse\032g\n\022RequestVoteRequest\022\014\n\004term\030\001 \002(\005"
      "\022\024\n\014candidate_id\030\002 \002(\005\022\026\n\016last_log_index"
      "\030\003 \002(\005\022\025\n\rlast_log_term\030\004 \002(\005\032E\n\023Request"
      "VoteResponse\022\014\n\004term\030\001 \002(\005\022 \n\030vote_resul"
      "t_term_granted\030\002 \002(\005\032\240\001\n\024AppendEntriesRe"
      "quest\022\014\n\004term\030\001 \002(\005\022\021\n\tleader_id\030\002 \002(\005\022\026"
      "\n\016prev_log_index\030\003 \002(\005\022\025\n\rprev_log_term\030"
      "\004 \002(\005\022!\n\007entries\030\005 \003(\0132\020.flowmq.LogEntry"
      "\022\025\n\rleader_commit\030\006 \002(\005\032t\n\025AppendEntries"
      "Response\022\014\n\004term\030\001 \002(\005\022\023\n\013follower_id\030\002 "
      "\002(\005\022\035\n\025append_result_success\030\003 \002(\005\022\031\n\021la"
      "st_index_synced\030\004 \002(\005\0327\n\020ClientPutMessag"
      "e\022\017\n\007message\030\001 \002(\t\022\022\n\nmessage_id\030\002 \001(\003\032q"
      "\n\030ClientPutMessageResponse\022\022\n\nmessage_id"
      "\030\001 \002(\003\022*\n\006status\030\002 \002(\0162\032.flowmq.FlowMess"
      "age.Status\022\025\n\rerror_message\030\003 \002(\t\032)\n\023Cli"
      "entCommitMessage\022\022\n\nmessage_id\030\001 \002(\003\0328\n\021"
      "ServerSendMessage\022\022\n\nmessage_id\030\001 \002(\003\022\017\n"
      "\007message\030\002 \002(\t\0328\n\017ClientOpenQueue\022\021\n\tope"
      "n_mode\030\001 \002(\005\022\022\n\nqueue_name\030\002 \002(\t\032\204\001\n\027Cli"
      "entOpenQueueResponse\022*\n\006status\030\001 \002(\0162\032.f"
      "lowmq.FlowMessage.Status\022\025\n\rerror_messag"
      "e\030\002 \002(\t\022\021\n\tleader_ip\030\003 \001(\t\022\023\n\013leader_por"
      "t\030\004 \001(\t\032)\n\024ConsumerDisconnected\022\021\n\tclien"
      "t_id\030\001 \002(\005\"\307\002\n\013MessageType\022\030\n\024REQUEST_VO"
      "TE_REQUEST\020\000\022\031\n\025REQUEST_VOTE_RESPONSE\020\001\022"
      "\032\n\026APPEND_ENTRIES_REQUEST\020\002\022\033\n\027APPEND_EN"
      "TRIES_RESPONSE\020\003\022\026\n\022CLIENT_PUT_MESSAGE\020\n"
      "\022\031\n\025CLIENT_COMMIT_MESSAGE\020\013\022\027\n\023SERVER_SE"
      "ND_MESSAGE\020\014\022\025\n\021CLIENT_OPEN_QUEUE\020\r\022\031\n\025C"
      "ONSUMER_DISCONNECTED\020\016\022\037\n\033CLIENT_PUT_MES"
      "SAGE_RESPONSE\020\017\022\036\n\032CLIENT_OPEN_QUEUE_RES"
      "PONSE\020\020\022\013\n\007UNKNOWN\020c\" \n\006Status\022\013\n\007SUCCES"
      "S\020\000\022\t\n\005ERROR\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2374);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flow_message.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_flow_5fmessage_2eproto
namespace flowmq {
const ::google::protobuf::EnumDescriptor* LogEntry_OPERATION_descriptor() {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flow_5fmessage_2eproto::file_level_enum_descriptors[0];
}
bool LogEntry_OPERATION_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LogEntry_OPERATION LogEntry::ADD;
const LogEntry_OPERATION LogEntry::COMMIT;
const LogEntry_OPERATION LogEntry::OPERATION_MIN;
const LogEntry_OPERATION LogEntry::OPERATION_MAX;
const int LogEntry::OPERATION_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FlowMessage_MessageType_descriptor() {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flow_5fmessage_2eproto::file_level_enum_descriptors[1];
}
bool FlowMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 99:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FlowMessage_MessageType FlowMessage::REQUEST_VOTE_REQUEST;
const FlowMessage_MessageType FlowMessage::REQUEST_VOTE_RESPONSE;
const FlowMessage_MessageType FlowMessage::APPEND_ENTRIES_REQUEST;
const FlowMessage_MessageType FlowMessage::APPEND_ENTRIES_RESPONSE;
const FlowMessage_MessageType FlowMessage::CLIENT_PUT_MESSAGE;
const FlowMessage_MessageType FlowMessage::CLIENT_COMMIT_MESSAGE;
const FlowMessage_MessageType FlowMessage::SERVER_SEND_MESSAGE;
const FlowMessage_MessageType FlowMessage::CLIENT_OPEN_QUEUE;
const FlowMessage_MessageType FlowMessage::CONSUMER_DISCONNECTED;
const FlowMessage_MessageType FlowMessage::CLIENT_PUT_MESSAGE_RESPONSE;
const FlowMessage_MessageType FlowMessage::CLIENT_OPEN_QUEUE_RESPONSE;
const FlowMessage_MessageType FlowMessage::UNKNOWN;
const FlowMessage_MessageType FlowMessage::MessageType_MIN;
const FlowMessage_MessageType FlowMessage::MessageType_MAX;
const int FlowMessage::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FlowMessage_Status_descriptor() {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flow_5fmessage_2eproto::file_level_enum_descriptors[2];
}
bool FlowMessage_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FlowMessage_Status FlowMessage::SUCCESS;
const FlowMessage_Status FlowMessage::ERROR;
const FlowMessage_Status FlowMessage::Status_MIN;
const FlowMessage_Status FlowMessage::Status_MAX;
const int FlowMessage::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void LogEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntry::kIndexFieldNumber;
const int LogEntry::kTermFieldNumber;
const int LogEntry::kMessageIdFieldNumber;
const int LogEntry::kOperationFieldNumber;
const int LogEntry::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntry::LogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flow_5fmessage_2eproto::scc_info_LogEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flowmq.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&index_)) + sizeof(operation_));
  // @@protoc_insertion_point(copy_constructor:flowmq.LogEntry)
}

void LogEntry::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&index_)) + sizeof(operation_));
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:flowmq.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogEntry::descriptor() {
  ::protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogEntry& LogEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flow_5fmessage_2eproto::scc_info_LogEntry.base);
  return *internal_default_instance();
}


void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmq.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operation_) -
        reinterpret_cast<char*>(&index_)) + sizeof(operation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flowmq.LogEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 message_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 operation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_operation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flowmq.LogEntry.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flowmq.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flowmq.LogEntry)
  return false;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flowmq.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 term = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->term(), output);
  }

  // required int64 message_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->message_id(), output);
  }

  // required int32 operation = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->operation(), output);
  }

  // required string message = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.LogEntry.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flowmq.LogEntry)
}

::google::protobuf::uint8* LogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flowmq.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 term = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->term(), target);
  }

  // required int64 message_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->message_id(), target);
  }

  // required int32 operation = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->operation(), target);
  }

  // required string message = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.LogEntry.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmq.LogEntry)
  return target;
}

size_t LogEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:flowmq.LogEntry)
  size_t total_size = 0;

  if (has_message()) {
    // required string message = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (has_index()) {
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  if (has_term()) {
    // required int32 term = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  if (has_message_id()) {
    // required int64 message_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());
  }

  if (has_operation()) {
    // required int32 operation = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->operation());
  }

  return total_size;
}
size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmq.LogEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string message = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

    // required int32 term = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());

    // required int64 message_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());

    // required int32 operation = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->operation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmq.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmq.LogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmq.LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmq.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000008u) {
      message_id_ = from.message_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      operation_ = from.operation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmq.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmq.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(term_, other->term_);
  swap(message_id_, other->message_id_);
  swap(operation_, other->operation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowMessage_RequestVoteRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowMessage_RequestVoteRequest::kTermFieldNumber;
const int FlowMessage_RequestVoteRequest::kCandidateIdFieldNumber;
const int FlowMessage_RequestVoteRequest::kLastLogIndexFieldNumber;
const int FlowMessage_RequestVoteRequest::kLastLogTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowMessage_RequestVoteRequest::FlowMessage_RequestVoteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_RequestVoteRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flowmq.FlowMessage.RequestVoteRequest)
}
FlowMessage_RequestVoteRequest::FlowMessage_RequestVoteRequest(const FlowMessage_RequestVoteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_log_term_) -
    reinterpret_cast<char*>(&term_)) + sizeof(last_log_term_));
  // @@protoc_insertion_point(copy_constructor:flowmq.FlowMessage.RequestVoteRequest)
}

void FlowMessage_RequestVoteRequest::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_log_term_) -
      reinterpret_cast<char*>(&term_)) + sizeof(last_log_term_));
}

FlowMessage_RequestVoteRequest::~FlowMessage_RequestVoteRequest() {
  // @@protoc_insertion_point(destructor:flowmq.FlowMessage.RequestVoteRequest)
  SharedDtor();
}

void FlowMessage_RequestVoteRequest::SharedDtor() {
}

void FlowMessage_RequestVoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowMessage_RequestVoteRequest::descriptor() {
  ::protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowMessage_RequestVoteRequest& FlowMessage_RequestVoteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_RequestVoteRequest.base);
  return *internal_default_instance();
}


void FlowMessage_RequestVoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmq.FlowMessage.RequestVoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_log_term_) -
        reinterpret_cast<char*>(&term_)) + sizeof(last_log_term_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlowMessage_RequestVoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flowmq.FlowMessage.RequestVoteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 candidate_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_candidate_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candidate_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 last_log_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_log_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 last_log_term = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_last_log_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flowmq.FlowMessage.RequestVoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flowmq.FlowMessage.RequestVoteRequest)
  return false;
#undef DO_
}

void FlowMessage_RequestVoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flowmq.FlowMessage.RequestVoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 term = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // required int32 candidate_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->candidate_id(), output);
  }

  // required int32 last_log_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->last_log_index(), output);
  }

  // required int32 last_log_term = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->last_log_term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flowmq.FlowMessage.RequestVoteRequest)
}

::google::protobuf::uint8* FlowMessage_RequestVoteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flowmq.FlowMessage.RequestVoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // required int32 candidate_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->candidate_id(), target);
  }

  // required int32 last_log_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->last_log_index(), target);
  }

  // required int32 last_log_term = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->last_log_term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmq.FlowMessage.RequestVoteRequest)
  return target;
}

size_t FlowMessage_RequestVoteRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:flowmq.FlowMessage.RequestVoteRequest)
  size_t total_size = 0;

  if (has_term()) {
    // required int32 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  if (has_candidate_id()) {
    // required int32 candidate_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->candidate_id());
  }

  if (has_last_log_index()) {
    // required int32 last_log_index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_log_index());
  }

  if (has_last_log_term()) {
    // required int32 last_log_term = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_log_term());
  }

  return total_size;
}
size_t FlowMessage_RequestVoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmq.FlowMessage.RequestVoteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());

    // required int32 candidate_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->candidate_id());

    // required int32 last_log_index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_log_index());

    // required int32 last_log_term = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_log_term());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowMessage_RequestVoteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmq.FlowMessage.RequestVoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage_RequestVoteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowMessage_RequestVoteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmq.FlowMessage.RequestVoteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmq.FlowMessage.RequestVoteRequest)
    MergeFrom(*source);
  }
}

void FlowMessage_RequestVoteRequest::MergeFrom(const FlowMessage_RequestVoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmq.FlowMessage.RequestVoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      candidate_id_ = from.candidate_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_log_index_ = from.last_log_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_log_term_ = from.last_log_term_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlowMessage_RequestVoteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmq.FlowMessage.RequestVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage_RequestVoteRequest::CopyFrom(const FlowMessage_RequestVoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmq.FlowMessage.RequestVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage_RequestVoteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void FlowMessage_RequestVoteRequest::Swap(FlowMessage_RequestVoteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowMessage_RequestVoteRequest::InternalSwap(FlowMessage_RequestVoteRequest* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(candidate_id_, other->candidate_id_);
  swap(last_log_index_, other->last_log_index_);
  swap(last_log_term_, other->last_log_term_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowMessage_RequestVoteRequest::GetMetadata() const {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowMessage_RequestVoteResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowMessage_RequestVoteResponse::kTermFieldNumber;
const int FlowMessage_RequestVoteResponse::kVoteResultTermGrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowMessage_RequestVoteResponse::FlowMessage_RequestVoteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_RequestVoteResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flowmq.FlowMessage.RequestVoteResponse)
}
FlowMessage_RequestVoteResponse::FlowMessage_RequestVoteResponse(const FlowMessage_RequestVoteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_result_term_granted_) -
    reinterpret_cast<char*>(&term_)) + sizeof(vote_result_term_granted_));
  // @@protoc_insertion_point(copy_constructor:flowmq.FlowMessage.RequestVoteResponse)
}

void FlowMessage_RequestVoteResponse::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vote_result_term_granted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(vote_result_term_granted_));
}

FlowMessage_RequestVoteResponse::~FlowMessage_RequestVoteResponse() {
  // @@protoc_insertion_point(destructor:flowmq.FlowMessage.RequestVoteResponse)
  SharedDtor();
}

void FlowMessage_RequestVoteResponse::SharedDtor() {
}

void FlowMessage_RequestVoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowMessage_RequestVoteResponse::descriptor() {
  ::protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowMessage_RequestVoteResponse& FlowMessage_RequestVoteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_RequestVoteResponse.base);
  return *internal_default_instance();
}


void FlowMessage_RequestVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmq.FlowMessage.RequestVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vote_result_term_granted_) -
        reinterpret_cast<char*>(&term_)) + sizeof(vote_result_term_granted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlowMessage_RequestVoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flowmq.FlowMessage.RequestVoteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vote_result_term_granted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_vote_result_term_granted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vote_result_term_granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flowmq.FlowMessage.RequestVoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flowmq.FlowMessage.RequestVoteResponse)
  return false;
#undef DO_
}

void FlowMessage_RequestVoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flowmq.FlowMessage.RequestVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 term = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // required int32 vote_result_term_granted = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vote_result_term_granted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flowmq.FlowMessage.RequestVoteResponse)
}

::google::protobuf::uint8* FlowMessage_RequestVoteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flowmq.FlowMessage.RequestVoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // required int32 vote_result_term_granted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vote_result_term_granted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmq.FlowMessage.RequestVoteResponse)
  return target;
}

size_t FlowMessage_RequestVoteResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:flowmq.FlowMessage.RequestVoteResponse)
  size_t total_size = 0;

  if (has_term()) {
    // required int32 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  if (has_vote_result_term_granted()) {
    // required int32 vote_result_term_granted = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vote_result_term_granted());
  }

  return total_size;
}
size_t FlowMessage_RequestVoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmq.FlowMessage.RequestVoteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());

    // required int32 vote_result_term_granted = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vote_result_term_granted());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowMessage_RequestVoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmq.FlowMessage.RequestVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage_RequestVoteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowMessage_RequestVoteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmq.FlowMessage.RequestVoteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmq.FlowMessage.RequestVoteResponse)
    MergeFrom(*source);
  }
}

void FlowMessage_RequestVoteResponse::MergeFrom(const FlowMessage_RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmq.FlowMessage.RequestVoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      vote_result_term_granted_ = from.vote_result_term_granted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlowMessage_RequestVoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmq.FlowMessage.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage_RequestVoteResponse::CopyFrom(const FlowMessage_RequestVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmq.FlowMessage.RequestVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage_RequestVoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FlowMessage_RequestVoteResponse::Swap(FlowMessage_RequestVoteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowMessage_RequestVoteResponse::InternalSwap(FlowMessage_RequestVoteResponse* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(vote_result_term_granted_, other->vote_result_term_granted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowMessage_RequestVoteResponse::GetMetadata() const {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowMessage_AppendEntriesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowMessage_AppendEntriesRequest::kTermFieldNumber;
const int FlowMessage_AppendEntriesRequest::kLeaderIdFieldNumber;
const int FlowMessage_AppendEntriesRequest::kPrevLogIndexFieldNumber;
const int FlowMessage_AppendEntriesRequest::kPrevLogTermFieldNumber;
const int FlowMessage_AppendEntriesRequest::kEntriesFieldNumber;
const int FlowMessage_AppendEntriesRequest::kLeaderCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowMessage_AppendEntriesRequest::FlowMessage_AppendEntriesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_AppendEntriesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flowmq.FlowMessage.AppendEntriesRequest)
}
FlowMessage_AppendEntriesRequest::FlowMessage_AppendEntriesRequest(const FlowMessage_AppendEntriesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&leader_commit_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leader_commit_));
  // @@protoc_insertion_point(copy_constructor:flowmq.FlowMessage.AppendEntriesRequest)
}

void FlowMessage_AppendEntriesRequest::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_commit_) -
      reinterpret_cast<char*>(&term_)) + sizeof(leader_commit_));
}

FlowMessage_AppendEntriesRequest::~FlowMessage_AppendEntriesRequest() {
  // @@protoc_insertion_point(destructor:flowmq.FlowMessage.AppendEntriesRequest)
  SharedDtor();
}

void FlowMessage_AppendEntriesRequest::SharedDtor() {
}

void FlowMessage_AppendEntriesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowMessage_AppendEntriesRequest::descriptor() {
  ::protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowMessage_AppendEntriesRequest& FlowMessage_AppendEntriesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_AppendEntriesRequest.base);
  return *internal_default_instance();
}


void FlowMessage_AppendEntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmq.FlowMessage.AppendEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leader_commit_) -
        reinterpret_cast<char*>(&term_)) + sizeof(leader_commit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlowMessage_AppendEntriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flowmq.FlowMessage.AppendEntriesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 leader_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_leader_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 prev_log_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_prev_log_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 prev_log_term = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_prev_log_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flowmq.LogEntry entries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 leader_commit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_leader_commit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flowmq.FlowMessage.AppendEntriesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flowmq.FlowMessage.AppendEntriesRequest)
  return false;
#undef DO_
}

void FlowMessage_AppendEntriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flowmq.FlowMessage.AppendEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 term = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // required int32 leader_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leader_id(), output);
  }

  // required int32 prev_log_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prev_log_index(), output);
  }

  // required int32 prev_log_term = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prev_log_term(), output);
  }

  // repeated .flowmq.LogEntry entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->entries(static_cast<int>(i)),
      output);
  }

  // required int32 leader_commit = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->leader_commit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flowmq.FlowMessage.AppendEntriesRequest)
}

::google::protobuf::uint8* FlowMessage_AppendEntriesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flowmq.FlowMessage.AppendEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // required int32 leader_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leader_id(), target);
  }

  // required int32 prev_log_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prev_log_index(), target);
  }

  // required int32 prev_log_term = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prev_log_term(), target);
  }

  // repeated .flowmq.LogEntry entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->entries(static_cast<int>(i)), deterministic, target);
  }

  // required int32 leader_commit = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->leader_commit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmq.FlowMessage.AppendEntriesRequest)
  return target;
}

size_t FlowMessage_AppendEntriesRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:flowmq.FlowMessage.AppendEntriesRequest)
  size_t total_size = 0;

  if (has_term()) {
    // required int32 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  if (has_leader_id()) {
    // required int32 leader_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leader_id());
  }

  if (has_prev_log_index()) {
    // required int32 prev_log_index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prev_log_index());
  }

  if (has_prev_log_term()) {
    // required int32 prev_log_term = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prev_log_term());
  }

  if (has_leader_commit()) {
    // required int32 leader_commit = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leader_commit());
  }

  return total_size;
}
size_t FlowMessage_AppendEntriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmq.FlowMessage.AppendEntriesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());

    // required int32 leader_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leader_id());

    // required int32 prev_log_index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prev_log_index());

    // required int32 prev_log_term = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prev_log_term());

    // required int32 leader_commit = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leader_commit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .flowmq.LogEntry entries = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowMessage_AppendEntriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmq.FlowMessage.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage_AppendEntriesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowMessage_AppendEntriesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmq.FlowMessage.AppendEntriesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmq.FlowMessage.AppendEntriesRequest)
    MergeFrom(*source);
  }
}

void FlowMessage_AppendEntriesRequest::MergeFrom(const FlowMessage_AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmq.FlowMessage.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      leader_id_ = from.leader_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      prev_log_index_ = from.prev_log_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      prev_log_term_ = from.prev_log_term_;
    }
    if (cached_has_bits & 0x00000010u) {
      leader_commit_ = from.leader_commit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlowMessage_AppendEntriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmq.FlowMessage.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage_AppendEntriesRequest::CopyFrom(const FlowMessage_AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmq.FlowMessage.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage_AppendEntriesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void FlowMessage_AppendEntriesRequest::Swap(FlowMessage_AppendEntriesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowMessage_AppendEntriesRequest::InternalSwap(FlowMessage_AppendEntriesRequest* other) {
  using std::swap;
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(term_, other->term_);
  swap(leader_id_, other->leader_id_);
  swap(prev_log_index_, other->prev_log_index_);
  swap(prev_log_term_, other->prev_log_term_);
  swap(leader_commit_, other->leader_commit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowMessage_AppendEntriesRequest::GetMetadata() const {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowMessage_AppendEntriesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowMessage_AppendEntriesResponse::kTermFieldNumber;
const int FlowMessage_AppendEntriesResponse::kFollowerIdFieldNumber;
const int FlowMessage_AppendEntriesResponse::kAppendResultSuccessFieldNumber;
const int FlowMessage_AppendEntriesResponse::kLastIndexSyncedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowMessage_AppendEntriesResponse::FlowMessage_AppendEntriesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_AppendEntriesResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flowmq.FlowMessage.AppendEntriesResponse)
}
FlowMessage_AppendEntriesResponse::FlowMessage_AppendEntriesResponse(const FlowMessage_AppendEntriesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_index_synced_) -
    reinterpret_cast<char*>(&term_)) + sizeof(last_index_synced_));
  // @@protoc_insertion_point(copy_constructor:flowmq.FlowMessage.AppendEntriesResponse)
}

void FlowMessage_AppendEntriesResponse::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_index_synced_) -
      reinterpret_cast<char*>(&term_)) + sizeof(last_index_synced_));
}

FlowMessage_AppendEntriesResponse::~FlowMessage_AppendEntriesResponse() {
  // @@protoc_insertion_point(destructor:flowmq.FlowMessage.AppendEntriesResponse)
  SharedDtor();
}

void FlowMessage_AppendEntriesResponse::SharedDtor() {
}

void FlowMessage_AppendEntriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowMessage_AppendEntriesResponse::descriptor() {
  ::protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowMessage_AppendEntriesResponse& FlowMessage_AppendEntriesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_AppendEntriesResponse.base);
  return *internal_default_instance();
}


void FlowMessage_AppendEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmq.FlowMessage.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_index_synced_) -
        reinterpret_cast<char*>(&term_)) + sizeof(last_index_synced_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlowMessage_AppendEntriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flowmq.FlowMessage.AppendEntriesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 follower_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_follower_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &follower_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 append_result_success = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_append_result_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &append_result_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 last_index_synced = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_last_index_synced();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_index_synced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flowmq.FlowMessage.AppendEntriesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flowmq.FlowMessage.AppendEntriesResponse)
  return false;
#undef DO_
}

void FlowMessage_AppendEntriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flowmq.FlowMessage.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 term = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // required int32 follower_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->follower_id(), output);
  }

  // required int32 append_result_success = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->append_result_success(), output);
  }

  // required int32 last_index_synced = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->last_index_synced(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flowmq.FlowMessage.AppendEntriesResponse)
}

::google::protobuf::uint8* FlowMessage_AppendEntriesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flowmq.FlowMessage.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 term = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // required int32 follower_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->follower_id(), target);
  }

  // required int32 append_result_success = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->append_result_success(), target);
  }

  // required int32 last_index_synced = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->last_index_synced(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmq.FlowMessage.AppendEntriesResponse)
  return target;
}

size_t FlowMessage_AppendEntriesResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:flowmq.FlowMessage.AppendEntriesResponse)
  size_t total_size = 0;

  if (has_term()) {
    // required int32 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  if (has_follower_id()) {
    // required int32 follower_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->follower_id());
  }

  if (has_append_result_success()) {
    // required int32 append_result_success = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->append_result_success());
  }

  if (has_last_index_synced()) {
    // required int32 last_index_synced = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_index_synced());
  }

  return total_size;
}
size_t FlowMessage_AppendEntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmq.FlowMessage.AppendEntriesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 term = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());

    // required int32 follower_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->follower_id());

    // required int32 append_result_success = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->append_result_success());

    // required int32 last_index_synced = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_index_synced());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowMessage_AppendEntriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmq.FlowMessage.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage_AppendEntriesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowMessage_AppendEntriesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmq.FlowMessage.AppendEntriesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmq.FlowMessage.AppendEntriesResponse)
    MergeFrom(*source);
  }
}

void FlowMessage_AppendEntriesResponse::MergeFrom(const FlowMessage_AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmq.FlowMessage.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      follower_id_ = from.follower_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      append_result_success_ = from.append_result_success_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_index_synced_ = from.last_index_synced_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlowMessage_AppendEntriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmq.FlowMessage.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage_AppendEntriesResponse::CopyFrom(const FlowMessage_AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmq.FlowMessage.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage_AppendEntriesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void FlowMessage_AppendEntriesResponse::Swap(FlowMessage_AppendEntriesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowMessage_AppendEntriesResponse::InternalSwap(FlowMessage_AppendEntriesResponse* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(follower_id_, other->follower_id_);
  swap(append_result_success_, other->append_result_success_);
  swap(last_index_synced_, other->last_index_synced_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowMessage_AppendEntriesResponse::GetMetadata() const {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowMessage_ClientPutMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowMessage_ClientPutMessage::kMessageFieldNumber;
const int FlowMessage_ClientPutMessage::kMessageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowMessage_ClientPutMessage::FlowMessage_ClientPutMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientPutMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flowmq.FlowMessage.ClientPutMessage)
}
FlowMessage_ClientPutMessage::FlowMessage_ClientPutMessage(const FlowMessage_ClientPutMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  message_id_ = from.message_id_;
  // @@protoc_insertion_point(copy_constructor:flowmq.FlowMessage.ClientPutMessage)
}

void FlowMessage_ClientPutMessage::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_ = GOOGLE_LONGLONG(0);
}

FlowMessage_ClientPutMessage::~FlowMessage_ClientPutMessage() {
  // @@protoc_insertion_point(destructor:flowmq.FlowMessage.ClientPutMessage)
  SharedDtor();
}

void FlowMessage_ClientPutMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FlowMessage_ClientPutMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowMessage_ClientPutMessage::descriptor() {
  ::protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowMessage_ClientPutMessage& FlowMessage_ClientPutMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientPutMessage.base);
  return *internal_default_instance();
}


void FlowMessage_ClientPutMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmq.FlowMessage.ClientPutMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  message_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlowMessage_ClientPutMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flowmq.FlowMessage.ClientPutMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flowmq.FlowMessage.ClientPutMessage.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 message_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flowmq.FlowMessage.ClientPutMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flowmq.FlowMessage.ClientPutMessage)
  return false;
#undef DO_
}

void FlowMessage_ClientPutMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flowmq.FlowMessage.ClientPutMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.FlowMessage.ClientPutMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional int64 message_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->message_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flowmq.FlowMessage.ClientPutMessage)
}

::google::protobuf::uint8* FlowMessage_ClientPutMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flowmq.FlowMessage.ClientPutMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.FlowMessage.ClientPutMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional int64 message_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->message_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmq.FlowMessage.ClientPutMessage)
  return target;
}

size_t FlowMessage_ClientPutMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmq.FlowMessage.ClientPutMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }
  // optional int64 message_id = 2;
  if (has_message_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowMessage_ClientPutMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmq.FlowMessage.ClientPutMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage_ClientPutMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowMessage_ClientPutMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmq.FlowMessage.ClientPutMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmq.FlowMessage.ClientPutMessage)
    MergeFrom(*source);
  }
}

void FlowMessage_ClientPutMessage::MergeFrom(const FlowMessage_ClientPutMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmq.FlowMessage.ClientPutMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      message_id_ = from.message_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlowMessage_ClientPutMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmq.FlowMessage.ClientPutMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage_ClientPutMessage::CopyFrom(const FlowMessage_ClientPutMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmq.FlowMessage.ClientPutMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage_ClientPutMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FlowMessage_ClientPutMessage::Swap(FlowMessage_ClientPutMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowMessage_ClientPutMessage::InternalSwap(FlowMessage_ClientPutMessage* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_id_, other->message_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowMessage_ClientPutMessage::GetMetadata() const {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowMessage_ClientPutMessageResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowMessage_ClientPutMessageResponse::kMessageIdFieldNumber;
const int FlowMessage_ClientPutMessageResponse::kStatusFieldNumber;
const int FlowMessage_ClientPutMessageResponse::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowMessage_ClientPutMessageResponse::FlowMessage_ClientPutMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientPutMessageResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flowmq.FlowMessage.ClientPutMessageResponse)
}
FlowMessage_ClientPutMessageResponse::FlowMessage_ClientPutMessageResponse(const FlowMessage_ClientPutMessageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  ::memcpy(&message_id_, &from.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:flowmq.FlowMessage.ClientPutMessageResponse)
}

void FlowMessage_ClientPutMessageResponse::SharedCtor() {
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&message_id_)) + sizeof(status_));
}

FlowMessage_ClientPutMessageResponse::~FlowMessage_ClientPutMessageResponse() {
  // @@protoc_insertion_point(destructor:flowmq.FlowMessage.ClientPutMessageResponse)
  SharedDtor();
}

void FlowMessage_ClientPutMessageResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FlowMessage_ClientPutMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowMessage_ClientPutMessageResponse::descriptor() {
  ::protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowMessage_ClientPutMessageResponse& FlowMessage_ClientPutMessageResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientPutMessageResponse.base);
  return *internal_default_instance();
}


void FlowMessage_ClientPutMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmq.FlowMessage.ClientPutMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&message_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlowMessage_ClientPutMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flowmq.FlowMessage.ClientPutMessageResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .flowmq.FlowMessage.Status status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::flowmq::FlowMessage_Status_IsValid(value)) {
            set_status(static_cast< ::flowmq::FlowMessage_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string error_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flowmq.FlowMessage.ClientPutMessageResponse.error_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flowmq.FlowMessage.ClientPutMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flowmq.FlowMessage.ClientPutMessageResponse)
  return false;
#undef DO_
}

void FlowMessage_ClientPutMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flowmq.FlowMessage.ClientPutMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 message_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->message_id(), output);
  }

  // required .flowmq.FlowMessage.Status status = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required string error_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.FlowMessage.ClientPutMessageResponse.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flowmq.FlowMessage.ClientPutMessageResponse)
}

::google::protobuf::uint8* FlowMessage_ClientPutMessageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flowmq.FlowMessage.ClientPutMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 message_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->message_id(), target);
  }

  // required .flowmq.FlowMessage.Status status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required string error_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.FlowMessage.ClientPutMessageResponse.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmq.FlowMessage.ClientPutMessageResponse)
  return target;
}

size_t FlowMessage_ClientPutMessageResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:flowmq.FlowMessage.ClientPutMessageResponse)
  size_t total_size = 0;

  if (has_error_message()) {
    // required string error_message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  if (has_message_id()) {
    // required int64 message_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());
  }

  if (has_status()) {
    // required .flowmq.FlowMessage.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t FlowMessage_ClientPutMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmq.FlowMessage.ClientPutMessageResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string error_message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());

    // required int64 message_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());

    // required .flowmq.FlowMessage.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowMessage_ClientPutMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmq.FlowMessage.ClientPutMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage_ClientPutMessageResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowMessage_ClientPutMessageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmq.FlowMessage.ClientPutMessageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmq.FlowMessage.ClientPutMessageResponse)
    MergeFrom(*source);
  }
}

void FlowMessage_ClientPutMessageResponse::MergeFrom(const FlowMessage_ClientPutMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmq.FlowMessage.ClientPutMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      message_id_ = from.message_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlowMessage_ClientPutMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmq.FlowMessage.ClientPutMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage_ClientPutMessageResponse::CopyFrom(const FlowMessage_ClientPutMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmq.FlowMessage.ClientPutMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage_ClientPutMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void FlowMessage_ClientPutMessageResponse::Swap(FlowMessage_ClientPutMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowMessage_ClientPutMessageResponse::InternalSwap(FlowMessage_ClientPutMessageResponse* other) {
  using std::swap;
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_id_, other->message_id_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowMessage_ClientPutMessageResponse::GetMetadata() const {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowMessage_ClientCommitMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowMessage_ClientCommitMessage::kMessageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowMessage_ClientCommitMessage::FlowMessage_ClientCommitMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientCommitMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flowmq.FlowMessage.ClientCommitMessage)
}
FlowMessage_ClientCommitMessage::FlowMessage_ClientCommitMessage(const FlowMessage_ClientCommitMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_id_ = from.message_id_;
  // @@protoc_insertion_point(copy_constructor:flowmq.FlowMessage.ClientCommitMessage)
}

void FlowMessage_ClientCommitMessage::SharedCtor() {
  message_id_ = GOOGLE_LONGLONG(0);
}

FlowMessage_ClientCommitMessage::~FlowMessage_ClientCommitMessage() {
  // @@protoc_insertion_point(destructor:flowmq.FlowMessage.ClientCommitMessage)
  SharedDtor();
}

void FlowMessage_ClientCommitMessage::SharedDtor() {
}

void FlowMessage_ClientCommitMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowMessage_ClientCommitMessage::descriptor() {
  ::protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowMessage_ClientCommitMessage& FlowMessage_ClientCommitMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientCommitMessage.base);
  return *internal_default_instance();
}


void FlowMessage_ClientCommitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmq.FlowMessage.ClientCommitMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlowMessage_ClientCommitMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flowmq.FlowMessage.ClientCommitMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flowmq.FlowMessage.ClientCommitMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flowmq.FlowMessage.ClientCommitMessage)
  return false;
#undef DO_
}

void FlowMessage_ClientCommitMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flowmq.FlowMessage.ClientCommitMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->message_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flowmq.FlowMessage.ClientCommitMessage)
}

::google::protobuf::uint8* FlowMessage_ClientCommitMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flowmq.FlowMessage.ClientCommitMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->message_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmq.FlowMessage.ClientCommitMessage)
  return target;
}

size_t FlowMessage_ClientCommitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmq.FlowMessage.ClientCommitMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 message_id = 1;
  if (has_message_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowMessage_ClientCommitMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmq.FlowMessage.ClientCommitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage_ClientCommitMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowMessage_ClientCommitMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmq.FlowMessage.ClientCommitMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmq.FlowMessage.ClientCommitMessage)
    MergeFrom(*source);
  }
}

void FlowMessage_ClientCommitMessage::MergeFrom(const FlowMessage_ClientCommitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmq.FlowMessage.ClientCommitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_id()) {
    set_message_id(from.message_id());
  }
}

void FlowMessage_ClientCommitMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmq.FlowMessage.ClientCommitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage_ClientCommitMessage::CopyFrom(const FlowMessage_ClientCommitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmq.FlowMessage.ClientCommitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage_ClientCommitMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FlowMessage_ClientCommitMessage::Swap(FlowMessage_ClientCommitMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowMessage_ClientCommitMessage::InternalSwap(FlowMessage_ClientCommitMessage* other) {
  using std::swap;
  swap(message_id_, other->message_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowMessage_ClientCommitMessage::GetMetadata() const {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowMessage_ServerSendMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowMessage_ServerSendMessage::kMessageIdFieldNumber;
const int FlowMessage_ServerSendMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowMessage_ServerSendMessage::FlowMessage_ServerSendMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ServerSendMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flowmq.FlowMessage.ServerSendMessage)
}
FlowMessage_ServerSendMessage::FlowMessage_ServerSendMessage(const FlowMessage_ServerSendMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  message_id_ = from.message_id_;
  // @@protoc_insertion_point(copy_constructor:flowmq.FlowMessage.ServerSendMessage)
}

void FlowMessage_ServerSendMessage::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_ = GOOGLE_LONGLONG(0);
}

FlowMessage_ServerSendMessage::~FlowMessage_ServerSendMessage() {
  // @@protoc_insertion_point(destructor:flowmq.FlowMessage.ServerSendMessage)
  SharedDtor();
}

void FlowMessage_ServerSendMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FlowMessage_ServerSendMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowMessage_ServerSendMessage::descriptor() {
  ::protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowMessage_ServerSendMessage& FlowMessage_ServerSendMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ServerSendMessage.base);
  return *internal_default_instance();
}


void FlowMessage_ServerSendMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmq.FlowMessage.ServerSendMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  message_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlowMessage_ServerSendMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flowmq.FlowMessage.ServerSendMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flowmq.FlowMessage.ServerSendMessage.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flowmq.FlowMessage.ServerSendMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flowmq.FlowMessage.ServerSendMessage)
  return false;
#undef DO_
}

void FlowMessage_ServerSendMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flowmq.FlowMessage.ServerSendMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 message_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->message_id(), output);
  }

  // required string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.FlowMessage.ServerSendMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flowmq.FlowMessage.ServerSendMessage)
}

::google::protobuf::uint8* FlowMessage_ServerSendMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flowmq.FlowMessage.ServerSendMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 message_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->message_id(), target);
  }

  // required string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.FlowMessage.ServerSendMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmq.FlowMessage.ServerSendMessage)
  return target;
}

size_t FlowMessage_ServerSendMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:flowmq.FlowMessage.ServerSendMessage)
  size_t total_size = 0;

  if (has_message()) {
    // required string message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (has_message_id()) {
    // required int64 message_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());
  }

  return total_size;
}
size_t FlowMessage_ServerSendMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmq.FlowMessage.ServerSendMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

    // required int64 message_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->message_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowMessage_ServerSendMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmq.FlowMessage.ServerSendMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage_ServerSendMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowMessage_ServerSendMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmq.FlowMessage.ServerSendMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmq.FlowMessage.ServerSendMessage)
    MergeFrom(*source);
  }
}

void FlowMessage_ServerSendMessage::MergeFrom(const FlowMessage_ServerSendMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmq.FlowMessage.ServerSendMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      message_id_ = from.message_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlowMessage_ServerSendMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmq.FlowMessage.ServerSendMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage_ServerSendMessage::CopyFrom(const FlowMessage_ServerSendMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmq.FlowMessage.ServerSendMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage_ServerSendMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FlowMessage_ServerSendMessage::Swap(FlowMessage_ServerSendMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowMessage_ServerSendMessage::InternalSwap(FlowMessage_ServerSendMessage* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_id_, other->message_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowMessage_ServerSendMessage::GetMetadata() const {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowMessage_ClientOpenQueue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowMessage_ClientOpenQueue::kOpenModeFieldNumber;
const int FlowMessage_ClientOpenQueue::kQueueNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowMessage_ClientOpenQueue::FlowMessage_ClientOpenQueue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientOpenQueue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flowmq.FlowMessage.ClientOpenQueue)
}
FlowMessage_ClientOpenQueue::FlowMessage_ClientOpenQueue(const FlowMessage_ClientOpenQueue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_queue_name()) {
    queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
  }
  open_mode_ = from.open_mode_;
  // @@protoc_insertion_point(copy_constructor:flowmq.FlowMessage.ClientOpenQueue)
}

void FlowMessage_ClientOpenQueue::SharedCtor() {
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_mode_ = 0;
}

FlowMessage_ClientOpenQueue::~FlowMessage_ClientOpenQueue() {
  // @@protoc_insertion_point(destructor:flowmq.FlowMessage.ClientOpenQueue)
  SharedDtor();
}

void FlowMessage_ClientOpenQueue::SharedDtor() {
  queue_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FlowMessage_ClientOpenQueue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowMessage_ClientOpenQueue::descriptor() {
  ::protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowMessage_ClientOpenQueue& FlowMessage_ClientOpenQueue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientOpenQueue.base);
  return *internal_default_instance();
}


void FlowMessage_ClientOpenQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmq.FlowMessage.ClientOpenQueue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    queue_name_.ClearNonDefaultToEmptyNoArena();
  }
  open_mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlowMessage_ClientOpenQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flowmq.FlowMessage.ClientOpenQueue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 open_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_open_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string queue_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queue_name().data(), static_cast<int>(this->queue_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flowmq.FlowMessage.ClientOpenQueue.queue_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flowmq.FlowMessage.ClientOpenQueue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flowmq.FlowMessage.ClientOpenQueue)
  return false;
#undef DO_
}

void FlowMessage_ClientOpenQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flowmq.FlowMessage.ClientOpenQueue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 open_mode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->open_mode(), output);
  }

  // required string queue_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queue_name().data(), static_cast<int>(this->queue_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.FlowMessage.ClientOpenQueue.queue_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->queue_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flowmq.FlowMessage.ClientOpenQueue)
}

::google::protobuf::uint8* FlowMessage_ClientOpenQueue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flowmq.FlowMessage.ClientOpenQueue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 open_mode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->open_mode(), target);
  }

  // required string queue_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queue_name().data(), static_cast<int>(this->queue_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.FlowMessage.ClientOpenQueue.queue_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->queue_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmq.FlowMessage.ClientOpenQueue)
  return target;
}

size_t FlowMessage_ClientOpenQueue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:flowmq.FlowMessage.ClientOpenQueue)
  size_t total_size = 0;

  if (has_queue_name()) {
    // required string queue_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_name());
  }

  if (has_open_mode()) {
    // required int32 open_mode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_mode());
  }

  return total_size;
}
size_t FlowMessage_ClientOpenQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmq.FlowMessage.ClientOpenQueue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string queue_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_name());

    // required int32 open_mode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowMessage_ClientOpenQueue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmq.FlowMessage.ClientOpenQueue)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage_ClientOpenQueue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowMessage_ClientOpenQueue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmq.FlowMessage.ClientOpenQueue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmq.FlowMessage.ClientOpenQueue)
    MergeFrom(*source);
  }
}

void FlowMessage_ClientOpenQueue::MergeFrom(const FlowMessage_ClientOpenQueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmq.FlowMessage.ClientOpenQueue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_queue_name();
      queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      open_mode_ = from.open_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlowMessage_ClientOpenQueue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmq.FlowMessage.ClientOpenQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage_ClientOpenQueue::CopyFrom(const FlowMessage_ClientOpenQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmq.FlowMessage.ClientOpenQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage_ClientOpenQueue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FlowMessage_ClientOpenQueue::Swap(FlowMessage_ClientOpenQueue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowMessage_ClientOpenQueue::InternalSwap(FlowMessage_ClientOpenQueue* other) {
  using std::swap;
  queue_name_.Swap(&other->queue_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(open_mode_, other->open_mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowMessage_ClientOpenQueue::GetMetadata() const {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowMessage_ClientOpenQueueResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowMessage_ClientOpenQueueResponse::kStatusFieldNumber;
const int FlowMessage_ClientOpenQueueResponse::kErrorMessageFieldNumber;
const int FlowMessage_ClientOpenQueueResponse::kLeaderIpFieldNumber;
const int FlowMessage_ClientOpenQueueResponse::kLeaderPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowMessage_ClientOpenQueueResponse::FlowMessage_ClientOpenQueueResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientOpenQueueResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flowmq.FlowMessage.ClientOpenQueueResponse)
}
FlowMessage_ClientOpenQueueResponse::FlowMessage_ClientOpenQueueResponse(const FlowMessage_ClientOpenQueueResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  leader_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leader_ip()) {
    leader_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_ip_);
  }
  leader_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leader_port()) {
    leader_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_port_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:flowmq.FlowMessage.ClientOpenQueueResponse)
}

void FlowMessage_ClientOpenQueueResponse::SharedCtor() {
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

FlowMessage_ClientOpenQueueResponse::~FlowMessage_ClientOpenQueueResponse() {
  // @@protoc_insertion_point(destructor:flowmq.FlowMessage.ClientOpenQueueResponse)
  SharedDtor();
}

void FlowMessage_ClientOpenQueueResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FlowMessage_ClientOpenQueueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowMessage_ClientOpenQueueResponse::descriptor() {
  ::protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowMessage_ClientOpenQueueResponse& FlowMessage_ClientOpenQueueResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ClientOpenQueueResponse.base);
  return *internal_default_instance();
}


void FlowMessage_ClientOpenQueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmq.FlowMessage.ClientOpenQueueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      error_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      leader_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      leader_port_.ClearNonDefaultToEmptyNoArena();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlowMessage_ClientOpenQueueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flowmq.FlowMessage.ClientOpenQueueResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .flowmq.FlowMessage.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::flowmq::FlowMessage_Status_IsValid(value)) {
            set_status(static_cast< ::flowmq::FlowMessage_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flowmq.FlowMessage.ClientOpenQueueResponse.error_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string leader_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_ip().data(), static_cast<int>(this->leader_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flowmq.FlowMessage.ClientOpenQueueResponse.leader_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string leader_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_port().data(), static_cast<int>(this->leader_port().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flowmq.FlowMessage.ClientOpenQueueResponse.leader_port");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flowmq.FlowMessage.ClientOpenQueueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flowmq.FlowMessage.ClientOpenQueueResponse)
  return false;
#undef DO_
}

void FlowMessage_ClientOpenQueueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flowmq.FlowMessage.ClientOpenQueueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .flowmq.FlowMessage.Status status = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // required string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.FlowMessage.ClientOpenQueueResponse.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // optional string leader_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_ip().data(), static_cast<int>(this->leader_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.FlowMessage.ClientOpenQueueResponse.leader_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->leader_ip(), output);
  }

  // optional string leader_port = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_port().data(), static_cast<int>(this->leader_port().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.FlowMessage.ClientOpenQueueResponse.leader_port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->leader_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flowmq.FlowMessage.ClientOpenQueueResponse)
}

::google::protobuf::uint8* FlowMessage_ClientOpenQueueResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flowmq.FlowMessage.ClientOpenQueueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .flowmq.FlowMessage.Status status = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // required string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.FlowMessage.ClientOpenQueueResponse.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  // optional string leader_ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_ip().data(), static_cast<int>(this->leader_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.FlowMessage.ClientOpenQueueResponse.leader_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leader_ip(), target);
  }

  // optional string leader_port = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_port().data(), static_cast<int>(this->leader_port().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flowmq.FlowMessage.ClientOpenQueueResponse.leader_port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->leader_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmq.FlowMessage.ClientOpenQueueResponse)
  return target;
}

size_t FlowMessage_ClientOpenQueueResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:flowmq.FlowMessage.ClientOpenQueueResponse)
  size_t total_size = 0;

  if (has_error_message()) {
    // required string error_message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  if (has_status()) {
    // required .flowmq.FlowMessage.Status status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t FlowMessage_ClientOpenQueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmq.FlowMessage.ClientOpenQueueResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string error_message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());

    // required .flowmq.FlowMessage.Status status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string leader_ip = 3;
    if (has_leader_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_ip());
    }

    // optional string leader_port = 4;
    if (has_leader_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowMessage_ClientOpenQueueResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmq.FlowMessage.ClientOpenQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage_ClientOpenQueueResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowMessage_ClientOpenQueueResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmq.FlowMessage.ClientOpenQueueResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmq.FlowMessage.ClientOpenQueueResponse)
    MergeFrom(*source);
  }
}

void FlowMessage_ClientOpenQueueResponse::MergeFrom(const FlowMessage_ClientOpenQueueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmq.FlowMessage.ClientOpenQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_leader_ip();
      leader_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_leader_port();
      leader_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_port_);
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlowMessage_ClientOpenQueueResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmq.FlowMessage.ClientOpenQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage_ClientOpenQueueResponse::CopyFrom(const FlowMessage_ClientOpenQueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmq.FlowMessage.ClientOpenQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage_ClientOpenQueueResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  return true;
}

void FlowMessage_ClientOpenQueueResponse::Swap(FlowMessage_ClientOpenQueueResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowMessage_ClientOpenQueueResponse::InternalSwap(FlowMessage_ClientOpenQueueResponse* other) {
  using std::swap;
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  leader_ip_.Swap(&other->leader_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  leader_port_.Swap(&other->leader_port_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowMessage_ClientOpenQueueResponse::GetMetadata() const {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowMessage_ConsumerDisconnected::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowMessage_ConsumerDisconnected::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowMessage_ConsumerDisconnected::FlowMessage_ConsumerDisconnected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ConsumerDisconnected.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flowmq.FlowMessage.ConsumerDisconnected)
}
FlowMessage_ConsumerDisconnected::FlowMessage_ConsumerDisconnected(const FlowMessage_ConsumerDisconnected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_ = from.client_id_;
  // @@protoc_insertion_point(copy_constructor:flowmq.FlowMessage.ConsumerDisconnected)
}

void FlowMessage_ConsumerDisconnected::SharedCtor() {
  client_id_ = 0;
}

FlowMessage_ConsumerDisconnected::~FlowMessage_ConsumerDisconnected() {
  // @@protoc_insertion_point(destructor:flowmq.FlowMessage.ConsumerDisconnected)
  SharedDtor();
}

void FlowMessage_ConsumerDisconnected::SharedDtor() {
}

void FlowMessage_ConsumerDisconnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowMessage_ConsumerDisconnected::descriptor() {
  ::protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowMessage_ConsumerDisconnected& FlowMessage_ConsumerDisconnected::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage_ConsumerDisconnected.base);
  return *internal_default_instance();
}


void FlowMessage_ConsumerDisconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmq.FlowMessage.ConsumerDisconnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlowMessage_ConsumerDisconnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flowmq.FlowMessage.ConsumerDisconnected)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_client_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flowmq.FlowMessage.ConsumerDisconnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flowmq.FlowMessage.ConsumerDisconnected)
  return false;
#undef DO_
}

void FlowMessage_ConsumerDisconnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flowmq.FlowMessage.ConsumerDisconnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flowmq.FlowMessage.ConsumerDisconnected)
}

::google::protobuf::uint8* FlowMessage_ConsumerDisconnected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flowmq.FlowMessage.ConsumerDisconnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmq.FlowMessage.ConsumerDisconnected)
  return target;
}

size_t FlowMessage_ConsumerDisconnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmq.FlowMessage.ConsumerDisconnected)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 client_id = 1;
  if (has_client_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->client_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowMessage_ConsumerDisconnected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmq.FlowMessage.ConsumerDisconnected)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage_ConsumerDisconnected* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowMessage_ConsumerDisconnected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmq.FlowMessage.ConsumerDisconnected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmq.FlowMessage.ConsumerDisconnected)
    MergeFrom(*source);
  }
}

void FlowMessage_ConsumerDisconnected::MergeFrom(const FlowMessage_ConsumerDisconnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmq.FlowMessage.ConsumerDisconnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_id()) {
    set_client_id(from.client_id());
  }
}

void FlowMessage_ConsumerDisconnected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmq.FlowMessage.ConsumerDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage_ConsumerDisconnected::CopyFrom(const FlowMessage_ConsumerDisconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmq.FlowMessage.ConsumerDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage_ConsumerDisconnected::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FlowMessage_ConsumerDisconnected::Swap(FlowMessage_ConsumerDisconnected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowMessage_ConsumerDisconnected::InternalSwap(FlowMessage_ConsumerDisconnected* other) {
  using std::swap;
  swap(client_id_, other->client_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowMessage_ConsumerDisconnected::GetMetadata() const {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowMessage::InitAsDefaultInstance() {
  ::flowmq::_FlowMessage_default_instance_._instance.get_mutable()->request_vote_request_ = const_cast< ::flowmq::FlowMessage_RequestVoteRequest*>(
      ::flowmq::FlowMessage_RequestVoteRequest::internal_default_instance());
  ::flowmq::_FlowMessage_default_instance_._instance.get_mutable()->request_vote_response_ = const_cast< ::flowmq::FlowMessage_RequestVoteResponse*>(
      ::flowmq::FlowMessage_RequestVoteResponse::internal_default_instance());
  ::flowmq::_FlowMessage_default_instance_._instance.get_mutable()->append_entries_request_ = const_cast< ::flowmq::FlowMessage_AppendEntriesRequest*>(
      ::flowmq::FlowMessage_AppendEntriesRequest::internal_default_instance());
  ::flowmq::_FlowMessage_default_instance_._instance.get_mutable()->append_entries_response_ = const_cast< ::flowmq::FlowMessage_AppendEntriesResponse*>(
      ::flowmq::FlowMessage_AppendEntriesResponse::internal_default_instance());
  ::flowmq::_FlowMessage_default_instance_._instance.get_mutable()->client_put_message_ = const_cast< ::flowmq::FlowMessage_ClientPutMessage*>(
      ::flowmq::FlowMessage_ClientPutMessage::internal_default_instance());
  ::flowmq::_FlowMessage_default_instance_._instance.get_mutable()->client_commit_message_ = const_cast< ::flowmq::FlowMessage_ClientCommitMessage*>(
      ::flowmq::FlowMessage_ClientCommitMessage::internal_default_instance());
  ::flowmq::_FlowMessage_default_instance_._instance.get_mutable()->server_send_message_ = const_cast< ::flowmq::FlowMessage_ServerSendMessage*>(
      ::flowmq::FlowMessage_ServerSendMessage::internal_default_instance());
  ::flowmq::_FlowMessage_default_instance_._instance.get_mutable()->client_open_queue_ = const_cast< ::flowmq::FlowMessage_ClientOpenQueue*>(
      ::flowmq::FlowMessage_ClientOpenQueue::internal_default_instance());
  ::flowmq::_FlowMessage_default_instance_._instance.get_mutable()->consumer_disconnected_ = const_cast< ::flowmq::FlowMessage_ConsumerDisconnected*>(
      ::flowmq::FlowMessage_ConsumerDisconnected::internal_default_instance());
  ::flowmq::_FlowMessage_default_instance_._instance.get_mutable()->client_open_queue_response_ = const_cast< ::flowmq::FlowMessage_ClientOpenQueueResponse*>(
      ::flowmq::FlowMessage_ClientOpenQueueResponse::internal_default_instance());
  ::flowmq::_FlowMessage_default_instance_._instance.get_mutable()->client_put_message_response_ = const_cast< ::flowmq::FlowMessage_ClientPutMessageResponse*>(
      ::flowmq::FlowMessage_ClientPutMessageResponse::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowMessage::kTypeFieldNumber;
const int FlowMessage::kPartitionIdFieldNumber;
const int FlowMessage::kRequestVoteRequestFieldNumber;
const int FlowMessage::kRequestVoteResponseFieldNumber;
const int FlowMessage::kAppendEntriesRequestFieldNumber;
const int FlowMessage::kAppendEntriesResponseFieldNumber;
const int FlowMessage::kClientPutMessageFieldNumber;
const int FlowMessage::kClientCommitMessageFieldNumber;
const int FlowMessage::kServerSendMessageFieldNumber;
const int FlowMessage::kClientOpenQueueFieldNumber;
const int FlowMessage::kConsumerDisconnectedFieldNumber;
const int FlowMessage::kClientOpenQueueResponseFieldNumber;
const int FlowMessage::kClientPutMessageResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowMessage::FlowMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:flowmq.FlowMessage)
}
FlowMessage::FlowMessage(const FlowMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_request_vote_request()) {
    request_vote_request_ = new ::flowmq::FlowMessage_RequestVoteRequest(*from.request_vote_request_);
  } else {
    request_vote_request_ = NULL;
  }
  if (from.has_request_vote_response()) {
    request_vote_response_ = new ::flowmq::FlowMessage_RequestVoteResponse(*from.request_vote_response_);
  } else {
    request_vote_response_ = NULL;
  }
  if (from.has_append_entries_request()) {
    append_entries_request_ = new ::flowmq::FlowMessage_AppendEntriesRequest(*from.append_entries_request_);
  } else {
    append_entries_request_ = NULL;
  }
  if (from.has_append_entries_response()) {
    append_entries_response_ = new ::flowmq::FlowMessage_AppendEntriesResponse(*from.append_entries_response_);
  } else {
    append_entries_response_ = NULL;
  }
  if (from.has_client_put_message()) {
    client_put_message_ = new ::flowmq::FlowMessage_ClientPutMessage(*from.client_put_message_);
  } else {
    client_put_message_ = NULL;
  }
  if (from.has_client_commit_message()) {
    client_commit_message_ = new ::flowmq::FlowMessage_ClientCommitMessage(*from.client_commit_message_);
  } else {
    client_commit_message_ = NULL;
  }
  if (from.has_server_send_message()) {
    server_send_message_ = new ::flowmq::FlowMessage_ServerSendMessage(*from.server_send_message_);
  } else {
    server_send_message_ = NULL;
  }
  if (from.has_client_open_queue()) {
    client_open_queue_ = new ::flowmq::FlowMessage_ClientOpenQueue(*from.client_open_queue_);
  } else {
    client_open_queue_ = NULL;
  }
  if (from.has_consumer_disconnected()) {
    consumer_disconnected_ = new ::flowmq::FlowMessage_ConsumerDisconnected(*from.consumer_disconnected_);
  } else {
    consumer_disconnected_ = NULL;
  }
  if (from.has_client_open_queue_response()) {
    client_open_queue_response_ = new ::flowmq::FlowMessage_ClientOpenQueueResponse(*from.client_open_queue_response_);
  } else {
    client_open_queue_response_ = NULL;
  }
  if (from.has_client_put_message_response()) {
    client_put_message_response_ = new ::flowmq::FlowMessage_ClientPutMessageResponse(*from.client_put_message_response_);
  } else {
    client_put_message_response_ = NULL;
  }
  ::memcpy(&partition_id_, &from.partition_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&partition_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:flowmq.FlowMessage)
}

void FlowMessage::SharedCtor() {
  ::memset(&request_vote_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&request_vote_request_)) + sizeof(type_));
}

FlowMessage::~FlowMessage() {
  // @@protoc_insertion_point(destructor:flowmq.FlowMessage)
  SharedDtor();
}

void FlowMessage::SharedDtor() {
  if (this != internal_default_instance()) delete request_vote_request_;
  if (this != internal_default_instance()) delete request_vote_response_;
  if (this != internal_default_instance()) delete append_entries_request_;
  if (this != internal_default_instance()) delete append_entries_response_;
  if (this != internal_default_instance()) delete client_put_message_;
  if (this != internal_default_instance()) delete client_commit_message_;
  if (this != internal_default_instance()) delete server_send_message_;
  if (this != internal_default_instance()) delete client_open_queue_;
  if (this != internal_default_instance()) delete consumer_disconnected_;
  if (this != internal_default_instance()) delete client_open_queue_response_;
  if (this != internal_default_instance()) delete client_put_message_response_;
}

void FlowMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlowMessage::descriptor() {
  ::protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowMessage& FlowMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_flow_5fmessage_2eproto::scc_info_FlowMessage.base);
  return *internal_default_instance();
}


void FlowMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmq.FlowMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(request_vote_request_ != NULL);
      request_vote_request_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(request_vote_response_ != NULL);
      request_vote_response_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(append_entries_request_ != NULL);
      append_entries_request_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(append_entries_response_ != NULL);
      append_entries_response_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(client_put_message_ != NULL);
      client_put_message_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(client_commit_message_ != NULL);
      client_commit_message_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(server_send_message_ != NULL);
      server_send_message_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(client_open_queue_ != NULL);
      client_open_queue_->Clear();
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(consumer_disconnected_ != NULL);
      consumer_disconnected_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(client_open_queue_response_ != NULL);
      client_open_queue_response_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(client_put_message_response_ != NULL);
      client_put_message_response_->Clear();
    }
  }
  if (cached_has_bits & 6144u) {
    ::memset(&partition_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&partition_id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlowMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flowmq.FlowMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .flowmq.FlowMessage.MessageType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::flowmq::FlowMessage_MessageType_IsValid(value)) {
            set_type(static_cast< ::flowmq::FlowMessage_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 partition_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_partition_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partition_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .flowmq.FlowMessage.RequestVoteRequest request_vote_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_vote_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .flowmq.FlowMessage.RequestVoteResponse request_vote_response = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request_vote_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .flowmq.FlowMessage.AppendEntriesRequest append_entries_request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_append_entries_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .flowmq.FlowMessage.AppendEntriesResponse append_entries_response = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_append_entries_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .flowmq.FlowMessage.ClientPutMessage client_put_message = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_put_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .flowmq.FlowMessage.ClientCommitMessage client_commit_message = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_commit_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .flowmq.FlowMessage.ServerSendMessage server_send_message = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_send_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .flowmq.FlowMessage.ClientOpenQueue client_open_queue = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_open_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .flowmq.FlowMessage.ConsumerDisconnected consumer_disconnected = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_consumer_disconnected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .flowmq.FlowMessage.ClientOpenQueueResponse client_open_queue_response = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_open_queue_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .flowmq.FlowMessage.ClientPutMessageResponse client_put_message_response = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_put_message_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flowmq.FlowMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flowmq.FlowMessage)
  return false;
#undef DO_
}

void FlowMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flowmq.FlowMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .flowmq.FlowMessage.MessageType type = 1;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 partition_id = 2;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->partition_id(), output);
  }

  // optional .flowmq.FlowMessage.RequestVoteRequest request_vote_request = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_request_vote_request(), output);
  }

  // optional .flowmq.FlowMessage.RequestVoteResponse request_vote_response = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_request_vote_response(), output);
  }

  // optional .flowmq.FlowMessage.AppendEntriesRequest append_entries_request = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_append_entries_request(), output);
  }

  // optional .flowmq.FlowMessage.AppendEntriesResponse append_entries_response = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_append_entries_response(), output);
  }

  // optional .flowmq.FlowMessage.ClientPutMessage client_put_message = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_client_put_message(), output);
  }

  // optional .flowmq.FlowMessage.ClientCommitMessage client_commit_message = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_client_commit_message(), output);
  }

  // optional .flowmq.FlowMessage.ServerSendMessage server_send_message = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_server_send_message(), output);
  }

  // optional .flowmq.FlowMessage.ClientOpenQueue client_open_queue = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_client_open_queue(), output);
  }

  // optional .flowmq.FlowMessage.ConsumerDisconnected consumer_disconnected = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_consumer_disconnected(), output);
  }

  // optional .flowmq.FlowMessage.ClientOpenQueueResponse client_open_queue_response = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_client_open_queue_response(), output);
  }

  // optional .flowmq.FlowMessage.ClientPutMessageResponse client_put_message_response = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_client_put_message_response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flowmq.FlowMessage)
}

::google::protobuf::uint8* FlowMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flowmq.FlowMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .flowmq.FlowMessage.MessageType type = 1;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int64 partition_id = 2;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->partition_id(), target);
  }

  // optional .flowmq.FlowMessage.RequestVoteRequest request_vote_request = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_request_vote_request(), deterministic, target);
  }

  // optional .flowmq.FlowMessage.RequestVoteResponse request_vote_response = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_request_vote_response(), deterministic, target);
  }

  // optional .flowmq.FlowMessage.AppendEntriesRequest append_entries_request = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_append_entries_request(), deterministic, target);
  }

  // optional .flowmq.FlowMessage.AppendEntriesResponse append_entries_response = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_append_entries_response(), deterministic, target);
  }

  // optional .flowmq.FlowMessage.ClientPutMessage client_put_message = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_client_put_message(), deterministic, target);
  }

  // optional .flowmq.FlowMessage.ClientCommitMessage client_commit_message = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_client_commit_message(), deterministic, target);
  }

  // optional .flowmq.FlowMessage.ServerSendMessage server_send_message = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_server_send_message(), deterministic, target);
  }

  // optional .flowmq.FlowMessage.ClientOpenQueue client_open_queue = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_client_open_queue(), deterministic, target);
  }

  // optional .flowmq.FlowMessage.ConsumerDisconnected consumer_disconnected = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_consumer_disconnected(), deterministic, target);
  }

  // optional .flowmq.FlowMessage.ClientOpenQueueResponse client_open_queue_response = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_client_open_queue_response(), deterministic, target);
  }

  // optional .flowmq.FlowMessage.ClientPutMessageResponse client_put_message_response = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_client_put_message_response(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmq.FlowMessage)
  return target;
}

size_t FlowMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmq.FlowMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .flowmq.FlowMessage.MessageType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .flowmq.FlowMessage.RequestVoteRequest request_vote_request = 3;
    if (has_request_vote_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_vote_request_);
    }

    // optional .flowmq.FlowMessage.RequestVoteResponse request_vote_response = 4;
    if (has_request_vote_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_vote_response_);
    }

    // optional .flowmq.FlowMessage.AppendEntriesRequest append_entries_request = 5;
    if (has_append_entries_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *append_entries_request_);
    }

    // optional .flowmq.FlowMessage.AppendEntriesResponse append_entries_response = 6;
    if (has_append_entries_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *append_entries_response_);
    }

    // optional .flowmq.FlowMessage.ClientPutMessage client_put_message = 7;
    if (has_client_put_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *client_put_message_);
    }

    // optional .flowmq.FlowMessage.ClientCommitMessage client_commit_message = 8;
    if (has_client_commit_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *client_commit_message_);
    }

    // optional .flowmq.FlowMessage.ServerSendMessage server_send_message = 9;
    if (has_server_send_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_send_message_);
    }

    // optional .flowmq.FlowMessage.ClientOpenQueue client_open_queue = 10;
    if (has_client_open_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *client_open_queue_);
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .flowmq.FlowMessage.ConsumerDisconnected consumer_disconnected = 11;
    if (has_consumer_disconnected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *consumer_disconnected_);
    }

    // optional .flowmq.FlowMessage.ClientOpenQueueResponse client_open_queue_response = 12;
    if (has_client_open_queue_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *client_open_queue_response_);
    }

    // optional .flowmq.FlowMessage.ClientPutMessageResponse client_put_message_response = 13;
    if (has_client_put_message_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *client_put_message_response_);
    }

    // optional int64 partition_id = 2;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partition_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmq.FlowMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmq.FlowMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmq.FlowMessage)
    MergeFrom(*source);
  }
}

void FlowMessage::MergeFrom(const FlowMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmq.FlowMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_request_vote_request()->::flowmq::FlowMessage_RequestVoteRequest::MergeFrom(from.request_vote_request());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_request_vote_response()->::flowmq::FlowMessage_RequestVoteResponse::MergeFrom(from.request_vote_response());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_append_entries_request()->::flowmq::FlowMessage_AppendEntriesRequest::MergeFrom(from.append_entries_request());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_append_entries_response()->::flowmq::FlowMessage_AppendEntriesResponse::MergeFrom(from.append_entries_response());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_client_put_message()->::flowmq::FlowMessage_ClientPutMessage::MergeFrom(from.client_put_message());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_client_commit_message()->::flowmq::FlowMessage_ClientCommitMessage::MergeFrom(from.client_commit_message());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_server_send_message()->::flowmq::FlowMessage_ServerSendMessage::MergeFrom(from.server_send_message());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_client_open_queue()->::flowmq::FlowMessage_ClientOpenQueue::MergeFrom(from.client_open_queue());
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_consumer_disconnected()->::flowmq::FlowMessage_ConsumerDisconnected::MergeFrom(from.consumer_disconnected());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_client_open_queue_response()->::flowmq::FlowMessage_ClientOpenQueueResponse::MergeFrom(from.client_open_queue_response());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_client_put_message_response()->::flowmq::FlowMessage_ClientPutMessageResponse::MergeFrom(from.client_put_message_response());
    }
    if (cached_has_bits & 0x00000800u) {
      partition_id_ = from.partition_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlowMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmq.FlowMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage::CopyFrom(const FlowMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmq.FlowMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001000) != 0x00001000) return false;
  if (has_request_vote_request()) {
    if (!this->request_vote_request_->IsInitialized()) return false;
  }
  if (has_request_vote_response()) {
    if (!this->request_vote_response_->IsInitialized()) return false;
  }
  if (has_append_entries_request()) {
    if (!this->append_entries_request_->IsInitialized()) return false;
  }
  if (has_append_entries_response()) {
    if (!this->append_entries_response_->IsInitialized()) return false;
  }
  if (has_client_put_message()) {
    if (!this->client_put_message_->IsInitialized()) return false;
  }
  if (has_client_commit_message()) {
    if (!this->client_commit_message_->IsInitialized()) return false;
  }
  if (has_server_send_message()) {
    if (!this->server_send_message_->IsInitialized()) return false;
  }
  if (has_client_open_queue()) {
    if (!this->client_open_queue_->IsInitialized()) return false;
  }
  if (has_consumer_disconnected()) {
    if (!this->consumer_disconnected_->IsInitialized()) return false;
  }
  if (has_client_open_queue_response()) {
    if (!this->client_open_queue_response_->IsInitialized()) return false;
  }
  if (has_client_put_message_response()) {
    if (!this->client_put_message_response_->IsInitialized()) return false;
  }
  return true;
}

void FlowMessage::Swap(FlowMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowMessage::InternalSwap(FlowMessage* other) {
  using std::swap;
  swap(request_vote_request_, other->request_vote_request_);
  swap(request_vote_response_, other->request_vote_response_);
  swap(append_entries_request_, other->append_entries_request_);
  swap(append_entries_response_, other->append_entries_response_);
  swap(client_put_message_, other->client_put_message_);
  swap(client_commit_message_, other->client_commit_message_);
  swap(server_send_message_, other->server_send_message_);
  swap(client_open_queue_, other->client_open_queue_);
  swap(consumer_disconnected_, other->consumer_disconnected_);
  swap(client_open_queue_response_, other->client_open_queue_response_);
  swap(client_put_message_response_, other->client_put_message_response_);
  swap(partition_id_, other->partition_id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlowMessage::GetMetadata() const {
  protobuf_flow_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_flow_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace flowmq
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flowmq::LogEntry* Arena::CreateMaybeMessage< ::flowmq::LogEntry >(Arena* arena) {
  return Arena::CreateInternal< ::flowmq::LogEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flowmq::FlowMessage_RequestVoteRequest* Arena::CreateMaybeMessage< ::flowmq::FlowMessage_RequestVoteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flowmq::FlowMessage_RequestVoteRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flowmq::FlowMessage_RequestVoteResponse* Arena::CreateMaybeMessage< ::flowmq::FlowMessage_RequestVoteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flowmq::FlowMessage_RequestVoteResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flowmq::FlowMessage_AppendEntriesRequest* Arena::CreateMaybeMessage< ::flowmq::FlowMessage_AppendEntriesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flowmq::FlowMessage_AppendEntriesRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flowmq::FlowMessage_AppendEntriesResponse* Arena::CreateMaybeMessage< ::flowmq::FlowMessage_AppendEntriesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flowmq::FlowMessage_AppendEntriesResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flowmq::FlowMessage_ClientPutMessage* Arena::CreateMaybeMessage< ::flowmq::FlowMessage_ClientPutMessage >(Arena* arena) {
  return Arena::CreateInternal< ::flowmq::FlowMessage_ClientPutMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flowmq::FlowMessage_ClientPutMessageResponse* Arena::CreateMaybeMessage< ::flowmq::FlowMessage_ClientPutMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flowmq::FlowMessage_ClientPutMessageResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flowmq::FlowMessage_ClientCommitMessage* Arena::CreateMaybeMessage< ::flowmq::FlowMessage_ClientCommitMessage >(Arena* arena) {
  return Arena::CreateInternal< ::flowmq::FlowMessage_ClientCommitMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flowmq::FlowMessage_ServerSendMessage* Arena::CreateMaybeMessage< ::flowmq::FlowMessage_ServerSendMessage >(Arena* arena) {
  return Arena::CreateInternal< ::flowmq::FlowMessage_ServerSendMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flowmq::FlowMessage_ClientOpenQueue* Arena::CreateMaybeMessage< ::flowmq::FlowMessage_ClientOpenQueue >(Arena* arena) {
  return Arena::CreateInternal< ::flowmq::FlowMessage_ClientOpenQueue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flowmq::FlowMessage_ClientOpenQueueResponse* Arena::CreateMaybeMessage< ::flowmq::FlowMessage_ClientOpenQueueResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flowmq::FlowMessage_ClientOpenQueueResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flowmq::FlowMessage_ConsumerDisconnected* Arena::CreateMaybeMessage< ::flowmq::FlowMessage_ConsumerDisconnected >(Arena* arena) {
  return Arena::CreateInternal< ::flowmq::FlowMessage_ConsumerDisconnected >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::flowmq::FlowMessage* Arena::CreateMaybeMessage< ::flowmq::FlowMessage >(Arena* arena) {
  return Arena::CreateInternal< ::flowmq::FlowMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
